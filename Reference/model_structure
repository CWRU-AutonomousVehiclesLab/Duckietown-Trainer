# Based on Nvidia behavioral_cloning Paper
model = Sequential()
model.add(Lambda(lambda x: x/255.0, input_shape))
#! keras.layers.Conv2D(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)
model.add(Conv2D(24, (5, 5), strides=(2, 2),
                    padding='valid', activation='relu'))
model.add(Conv2D(36, (5, 5), strides=(2, 2),
                    padding='valid', activation='relu'))
model.add(Conv2D(48, (5, 5), strides=(2, 2),
                    padding='valid', activation='relu'))
model.add(Conv2D(64, (3, 3), padding='valid', activation='relu'))
model.add(Conv2D(64, (3, 3), padding='valid', activation='relu'))
model.add(Flatten())
model.add(Dense(1164, activation='elu'))
model.add(Dense(200, activation='elu'))
model.add(Dense(100, activation='elu'))
model.add(Dense(20, activation='elu'))
model.add(Dense(2))
